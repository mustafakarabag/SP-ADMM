
    N = 10
    rho_a = 1e-1
    rho_b = 1e-1
    num_of_itr = 1000
    game_constants = 1*np.random.randn(N)
    box_a = [[0.001, 9]] * N
    box_b = [[0.001, 9]] * N
    x_a_list, x_b_list, z_a_list, z_b_list, lmd_a_list, lmd_b_list = saddle_point_admm_in_ball(game_constants, box_a, box_b ,rho_a, rho_b, num_of_itr)

    #Compute the game values
    game_val_list = []
    for (z_a, z_b) in zip(z_a_list, z_b_list):
        game_val_list.append(compute_game_value(game_constants, z_a, z_b))

    print(game_val_list[0])
    print(game_val_list[-1])
    #Compute the primal residual norm for the minimizer
    primal_residual_norm_a_list = []
    for (x_a, z_a) in zip(x_a_list, z_a_list):
        primal_residual_norm_a_list.append(np.linalg.norm(x_a - z_a))

    #Compute the primal residual norm for the maximizer
    primal_residual_norm_b_list = []
    for (x_b, z_b) in zip(x_b_list, z_b_list):
        primal_residual_norm_b_list.append(np.linalg.norm(x_b - z_b))